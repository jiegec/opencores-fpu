--- ../original/verilog/post_norm.v	2021-10-29 10:52:43.645416586 +0800
+++ post_norm.v	2021-10-29 10:52:51.789279216 +0800
@@ -143,7 +143,7 @@
 // Count Leading zeros in fraction
 
 always @(fract_in)
-   casex(fract_in)	// synopsys full_case parallel_case
+   casez(fract_in)	// synopsys full_case parallel_case
 	48'b1???????????????????????????????????????????????: fi_ldz =  1;
 	48'b01??????????????????????????????????????????????: fi_ldz =  2;
 	48'b001?????????????????????????????????????????????: fi_ldz =  3;
@@ -536,141 +536,6 @@
 // ---------------------------------------------------------------------
 // Debugging Stuff
 
-// synopsys translate_off
-
-wire	[26:0]	fracta_del, fractb_del;
-wire	[2:0]	grs_del;
-wire		dn_del;
-wire	[7:0]	exp_in_del;
-wire	[7:0]	exp_out_del;
-wire	[22:0]	fract_out_del;
-wire	[47:0]	fract_in_del;
-wire		overflow_del;
-wire	[1:0]	exp_ovf_del;
-wire	[22:0]	fract_out_x_del, fract_out_rnd2a_del;
-wire	[24:0]	trunc_xx_del;
-wire		exp_rnd_adj2a_del;
-wire	[22:0]	fract_dn_del;
-wire	[4:0]	div_opa_ldz_del;
-wire	[23:0]	fracta_div_del;
-wire	[23:0]	fractb_div_del;
-wire		div_inf_del;
-wire	[7:0]	fi_ldz_2_del;
-wire		inf_out_del, max_out_del;
-wire	[5:0]	fi_ldz_del;
-wire		rx_del;
-wire		ez_del;
-wire		lr;
-wire	[7:0]	shr, shl, exp_div_del;
-
-delay2 #26 ud000(clk, test.u0.fracta, fracta_del);
-delay2 #26 ud001(clk, test.u0.fractb, fractb_del);
-delay1  #2 ud002(clk, {g,r,s}, grs_del);
-delay1  #0 ud004(clk, dn, dn_del);
-delay1  #7 ud005(clk, exp_in, exp_in_del);
-delay1  #7 ud007(clk, exp_out_rnd, exp_out_del);
-delay1 #47 ud009(clk, fract_in, fract_in_del);
-delay1  #0 ud010(clk, overflow, overflow_del);
-delay1  #1 ud011(clk, exp_ovf, exp_ovf_del);
-delay1 #22 ud014(clk, fract_out, fract_out_x_del);
-delay1 #24 ud015(clk, fract_trunc, trunc_xx_del);
-delay1 	#0 ud017(clk, exp_rnd_adj2a, exp_rnd_adj2a_del);
-delay1  #4 ud019(clk, div_opa_ldz, div_opa_ldz_del);
-delay3 #23 ud020(clk, test.u0.fdiv_opa[49:26],	fracta_div_del);
-delay3 #23 ud021(clk, test.u0.fractb_mul,	fractb_div_del);
-delay1 	#0 ud023(clk, div_inf, div_inf_del);
-delay1  #7 ud024(clk, fi_ldz_2, fi_ldz_2_del);
-delay1 	#0 ud025(clk, inf_out, inf_out_del);
-delay1 	#0 ud026(clk, max_num, max_num_del);
-delay1 	#5 ud027(clk, fi_ldz, fi_ldz_del);
-delay1  #0 ud028(clk, rem_00, rx_del);
-
-delay1  #0 ud029(clk, left_right, lr);
-delay1  #7 ud030(clk, shift_right, shr);
-delay1  #7 ud031(clk, shift_left, shl);
-delay1 #22 ud032(clk, fract_out_rnd2a, fract_out_rnd2a_del);
-
-delay1  #7 ud033(clk, exp_div, exp_div_del);
-
-always @(test.error_event)
-   begin
-
-	$display("\n----------------------------------------------");
-
-	$display("ERROR: GRS: %b exp_ovf: %b dn: %h exp_in: %h exp_out: %h, exp_rnd_adj2a: %b",
-			grs_del, exp_ovf_del, dn_del, exp_in_del, exp_out_del, exp_rnd_adj2a_del);
-
-	$display("      div_opa: %b, div_opb: %b, rem_00: %b, exp_div: %h",
-			fracta_div_del, fractb_div_del, rx_del, exp_div_del);
-
-	$display("      lr: %b, shl: %h, shr: %h",
-			lr, shl, shr);
-
-
-	$display("       overflow: %b, fract_in=%b  fa:%h fb:%h",
-			overflow_del, fract_in_del, fracta_del, fractb_del);
-
-	$display("       div_opa_ldz: %h, div_inf: %b, inf_out: %b, max_num: %b, fi_ldz: %h, fi_ldz_2: %h",
-			div_opa_ldz_del, div_inf_del, inf_out_del, max_num_del, fi_ldz_del, fi_ldz_2_del);
-
-	$display("       fract_out_x: %b, fract_out_rnd2a_del: %h, fract_trunc: %b\n",
-			fract_out_x_del, fract_out_rnd2a_del, trunc_xx_del);
-   end
-
-
-// synopsys translate_on
-
-endmodule
-
-// synopsys translate_off
-
-module delay1(clk, in, out);
-parameter	N = 1;
-input	[N:0]	in;
-output	[N:0]	out;
-input		clk;
-
-reg	[N:0]	out;
-
-always @(posedge clk)
-	out <= #1 in;
-
-endmodule
-
-
-module delay2(clk, in, out);
-parameter	N = 1;
-input	[N:0]	in;
-output	[N:0]	out;
-input		clk;
-
-reg	[N:0]	out, r1;
-
-always @(posedge clk)
-	r1 <= #1 in;
-
-always @(posedge clk)
-	out <= #1 r1;
-
-endmodule
-
-module delay3(clk, in, out);
-parameter	N = 1;
-input	[N:0]	in;
-output	[N:0]	out;
-input		clk;
-
-reg	[N:0]	out, r1, r2;
-
-always @(posedge clk)
-	r1 <= #1 in;
-
-always @(posedge clk)
-	r2 <= #1 r1;
-
-always @(posedge clk)
-	out <= #1 r2;
 
 endmodule
 
-// synopsys translate_on
\ No newline at end of file
